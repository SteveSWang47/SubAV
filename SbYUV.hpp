///
/// \file      SbYUV.hpp
/// \brief     SbYUV-1.0
/// \details   ~
/// \author    SubIT
/// \date      19.10.2024
/// \copyright Â© SubIT 2024. All right reserved.
///
#pragma once

#include <cstddef>
#include <istream>
#include <ostream>
#include <cstdint>

namespace Sb::Video {

    // Descriptor is used do describe a raw yuv stream and create a SbYUV according to it.
    // Descriptor has the fixed size 16 byte, contains only basic functionalities.
    // However, program that uses this can extend it freely.
    struct alignas(alignof(uint32_t) * 4) YUV_Descriptor {

        // Magic number at the very beginning of a stream.
        static constexpr uint8_t magicDeclareTag[9]  = { 'S','u','b','I','T','-','Y','U','V' };
        static constexpr uint8_t magicVersionTag[7] = { '-', 'V', '-', '0', '1', '-', '0' };

        uint32_t width;  
        uint32_t height;

        // This is a special block -- high 16 bit is the numerator and
        // low 16 bit is the denominator. Do division and we get FPS.
        // Inverse the quotient we get "time duration between two frames".
        uint32_t frameRate;

        // Also a bit mask, contains additional information that would be use
        // in a more complex codec. (however standard codec would ignore this part).
        uint32_t extraFlag;
    };

    // Use this to crete a frame rate inside descriptor.
    uint32_t YUV_MakeFrameRate(uint16_t num, uint16_t den);
    // Verify whether an input stream is a SbYUV stream.
    bool     YUV_VerifyMagic(std::istream* input);
    // If we want to use SbYUV inside a program, this part will get all meta info
    // into descriptor and then set the read pointer of stream to the start of raw yuv stream inside SbYUV stream.
    uint32_t YUV_GetDescriptorAndPrepare(std::istream* input, YUV_Descriptor* desc);
    // Put magic into an empty SbYUV stream.
    uint32_t YUV_PutMagic(std::ostream* output);
    // Put meta info into an empty SbYUV stream.
    uint32_t YUV_PutDescriptorAndPrepare(std::ostream* output, const YUV_Descriptor* desc);
    // Get the size of the yuv frame.
    size_t   YUV_GetFrameBufferSize(const YUV_Descriptor* desc);
    // Get frequency which is the time duration between two frames from frameRate.
    float    YUV_GetFrequency(const YUV_Descriptor* desc);


    // ==============================================================================
    // Below functions, the stream at first parameter always represents SbYUV stream.
    // ==============================================================================

    // Convert raw yuv data to a SbYUV stream according to information inside inputDesc,
    // Which means you have to first fill in a descriptor then you can call this function.
    // input and output must be opened with std::ios::binary mode.
    // input now can only be yuv420p stream generated by FFMpeg.
    size_t YUV_FromDescriptorAndRawStream(std::ostream* output, const YUV_Descriptor* inputDesc, std::istream* input);
    // Convert input which is a SbYUV stream to output which is a raw yuv stream.
    // input's read pointer must be located at std::ios::beg.
    size_t YUV_ToDescriptorAndRawStream(std::istream* input, YUV_Descriptor* outputDesc, std::ostream* output);

}
